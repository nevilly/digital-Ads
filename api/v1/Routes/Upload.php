<?php

include_once $_SERVER["DOCUMENT_ROOT"]."/api/v1/Util/Util.php";
class Upload {
    private $data;
    private $clean;
    private $key;

    public function __construct(){
        $this->clean = new Util();
        $this->data = isset($_FILES) && count($_FILES) > 0 ? $_FILES : '';

        $this->key = getenv("SECRET");
    }

    public function upload(){

        if($this->clean->Method() !== "POST" && !(array) $this->data || !Util::tokenValidate())
            return array('status'=>403,'payload'=>"Unauthorized Access");

        $status = 401;
        $message = "File is required!";
        if(isset($_FILES['files']) && !empty($_FILES['files'])) {

            // get category id
            include_once __DIR__."/../Controller/UsersController.php";
            $userd = new UsersController();
            $username = strtolower(($userd->get(Util::$token))->username);

            $dir = "public/uploads/$username/data/";

            $handler = self::Uploader('files', $dir);

            $format = "jpg";
            $message = $handler['file'];
            if ($handler['status']  <= 200) {

                $f = $handler['file'];
                $dirs = $handler['dir'];
                $ext = $handler['ext'];
                $ff = explode('.', $f)[0];
                $this->compressImage($dir . "$ff.$format", $dir . "$ff.$format", 35);
                if ($ext === 'pdf') {
//                    if (extension_loaded('imagick')) {
//                        $pdf = new toImage("$dirs/$f", $ff);
//                        $pdf->setPage(1)
//                            ->setOutputFormat($format)
//                            ->setCompressionQuality(20)
//                            ->saveImage("$dir");
//
////                        unlink($dir."$ff.jpg");
//                        $img = $this->Static_url . "uploads/$serv/" . date("Y/m/d/") . "$ff.$format";
//                    }
                    @$this->copied($dir . "$f", "/var/www/epaper/$username/" . date("Y/m/d/") . "$f");
                    @$this->copied($dir . "$ff.$format", "/var/www/epaper/$username/" . date("Y/d/m/") . "$ff.$format");
                }

                $serv = !empty($serv) ? "/$serv/" : '';

                $message =  $handler['file'];
            }

            return ['status' => $handler['status'], "payload"=>['message' => $message,'dir' => $handler['dir']]];
        }
        return ['status'=>$status,'message'=>$message]; // TODO: Change the autogenerated stub
    }


    /**
     * @param $file
     * @param $dir
     * @return array
     */
    public static function Uploader($file,$dirs)
    {
        $dir = Util::root().$dirs;

        // Count total files
        $countfiles = is_array($_FILES["$file"]['name']) ? count($_FILES["$file"]['name'])  : 1;

        $filename = '';
        $message ='';
        // Looping all files
        for($i=0;$i<=$countfiles - 1;$i++){

            $status = 404;
            if(is_array($_FILES["$file"]['name'])){

                $fname = $_FILES["$file"]['name'][$i];
                $size = $_FILES["$file"]['size'][$i];
                $error = $_FILES["$file"]['error'][$i];
                $type = $_FILES["$file"]['type'][$i];
                $loc = $_FILES["$file"]['tmp_name'][$i];
            }else{
                $fname = $_FILES["$file"]['name'];
                $size = $_FILES["$file"]['size'];
                $error = $_FILES["$file"]['error'];
                $type = $_FILES["$file"]['type'];
                $loc = $_FILES["$file"]['tmp_name'];
            }

            $dot = explode('.',$fname);
            $ext = end($dot);

            if(!preg_match("/\.(jpg|jpeg|png|gif|pdf|webp|doc|mp3|aac|wav|docx)$/i",$fname)) {
                $message = "File(s) not allowed try, jpg,png,gif,webp,mp3,wav,aac,pdf, doc, docx \n";
            }else if($error > 0) {
                $message = 'Sorry an error occurred please try again';
            }else if($size >= 12000000) {
                $message = 'File is larger than 12MB. Try less than that';
            }
            else {
                $status = 502;
                $newname = $dot[0] = "fr".sha1(microtime()).".$ext,";

                $message = "";
                $filename = preg_replace("#[^a-z0-9._]#i","",$newname);
                self::mkpath($dir);
                if(is_dir($dir) && is_writable($dir) && !file_exists($dir. '' .$filename)) {

                    if(move_uploaded_file($loc, $dir. '/' .$filename)) {

                        if(preg_match("/\.(jpg|png|gif)$/i",$filename)){
                            self::rotate("$dir$filename",$ext);
                        }

                        $message .= $countfiles > 0 ? $filename.',' : $filename;
                        $status = 200;

                    }else{
                        $status = 404;
                        $message = 'Sorry an error occurred please try again! ';
                    }

                }

                return array('status'=>$status,'file'=>chop($message,','),'dir'=>$dirs,'ext'=>$ext);
            }

        }

        return array('status'=>$status,'file'=>chop($message,','),'dir'=>$dir,'ext'=>$ext);
    }

    /**
     * @param $source
     * @param $destination
     * @param $quality
     * @return mixed
     */
    public function compressImage($source, $destination, $quality) {
        // Get image info
        $imgInfo = getimagesize($source);
        $mime = $imgInfo['mime'];

        // Create a new image from file
        switch($mime){
            case 'image/jpeg':
                $image = @imagecreatefromjpeg($source);
                break;
            case 'image/png':
                $image = @imagecreatefrompng($source);
                break;
            case 'image/gif':
                $image = @imagecreatefromgif($source);
                break;
            default:
                $image = @imagecreatefromjpeg($source);
        }

        // Save image
        if($image)
            @imagejpeg($image, $destination, $quality);

        // Return compressed image
        return $destination;
    }


    /**
     * @param $file
     * @throws Exception
     */
    public function compressSVG($file){
        $dom = new DOMDocument('1.0', 'utf-8');
        $dom->load($file);
        $svg = $dom->documentElement;

        if ( ! $svg->hasAttribute('viewBox') ) { // viewBox is needed to establish
            // userspace coordinates
            $pattern = '/^(\d*\.\d+|\d+)(px)?$/'; // positive number, px unit optional

            $interpretable =  preg_match( $pattern, $svg->getAttribute('width'), $width ) &&
                preg_match( $pattern, $svg->getAttribute('height'), $height );

            if ( $interpretable ) {
                $view_box = implode(' ', [0, 0, $width[0], $height[0]]);
                $svg->setAttribute('viewBox', $view_box);
            } else { // this gets sticky
                throw new Exception("viewBox is dependent on environment");
            }
        }

        $svg->setAttribute('width', '1000');
        $svg->setAttribute('height', '1000');
        $dom->save($file);
    }

    /**
     * @param $from
     * @param $to
     * @return bool
     */
    public function copied($from,$to){
        if (strtoupper(substr(PHP_OS, 0, 3)) !== 'WIN'){
            if(!is_dir($to))
                $this->mkpath($to);

            return copy($from,$to);
        }

        return ;
    }


    /**
     * @param $path
     * @param $ext
     */
    public static function rotate($path,$ext){
        $exif = exif_read_data($path);
        if(isset($exif['Orientation']) && $exif['Orientation'] != "1"){
            $position = $exif['Orientation'];
            $degrees = "";
            if($position == "8"){
                $degrees = "90";
            } else if($position == "3"){
                $degrees = "180";
            } else if($position == "6"){
                $degrees = "-90";
            }

            if($degrees == "90" || $degrees == "180" || $degrees == "-90"){

                if($ext === "gif" || $ext === "GIF"){
                    $source = imagecreatefromgif($path);
                }else if($ext === "png" || $ext === "PNG"){
                    $source = imagecreatefrompng($path);
                }else{
                    $source = imagecreatefromstring(file_get_contents($path));
                }

                list($w_org,$h_org) = getimagesize($path);

                $fbk = imagecreatetruecolor($w_org,$h_org);
                imagecopyresampled($fbk,$source,0,0,0,0,$w_org,$h_org,$w_org,$h_org);

                $rotate = imagerotate($source, $degrees, 0);
                imagejpeg($rotate, realpath($path));

                imagedestroy($source);
                imagedestroy($rotate);
            }

        }
    }

    /**
     * @param $base64
     * @param $output_file
     * @return mixed
     */
    public static function base64_to_PNG( $base64, $output_file){
        $data = preg_replace("#^data:image/\w+;base64,#i",
            '', $base64);

        $data = str_replace(' ', '+', $data);

        $file = "fr".sha1(microtime()).".jpg";
        $outputname = $_SERVER['DOCUMENT_ROOT'].$output_file.$file;
        self::mkpath($output_file);
        file_put_contents($outputname,
            base64_decode($data));

        chmod($output_file, 0777);

//        self::compressImage($outputname,$outputname,20);
//        self::rotate($outputname,'jpg');

        return $file;
    }

    /**
     * @param $path
     * @return bool
     */
    public static function delete_file($path){
        if (is_dir($path) === true)
        {
            $files = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path), RecursiveIteratorIterator::CHILD_FIRST);

            foreach ($files as $file)
            {
                if (in_array($file->getBasename(), array('.', '..')) !== true)
                {
                    if ($file->isDir() === true)
                    {
                        rmdir($file->getPathName());
                    }

                    else if (($file->isFile() === true) || ($file->isLink() === true))
                    {
                        unlink($file->getPathname());
                    }
                }
            }

            return rmdir($path);
        }

        else if ((is_file($path) === true) || (is_link($path) === true))
        {
            return unlink($path);
        }

        return false;
    }


    /**
     * @param $path
     * @return bool
     */
    public static function mkpath($path)
    {
        if(@mkdir($path) || @file_exists($path)) return true;

        return (self::mkpath(dirname($path)) and @mkdir($path));
    }

}